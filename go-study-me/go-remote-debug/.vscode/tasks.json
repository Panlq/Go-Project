{
	"version": "2.0.0",
	"tasks": [
		{
			// 1. 编译程序,需要指定-gcflags=all="-N -l"禁用编译优化和內连
			"type": "shell", // 可以使用通用shell类型,也可以使用go类型
			"label": "go: build uvmt-agent: disable Inlining and optimizations", // lable是任务唯一标识
			"command": "go",
			"options": {
				"env": {
					"CGO_ENABLED": "0",
					"GOOS": "linux",
					"GOARCH": "arm64"
				},
			},
			"args": [
				"build",
				"-o",
				"/tmp/uvmt-agent",
				"-gcflags=all=\"-N -l\"",
				"/Users/jonpan/ownerpro/panlq-github/Go-Project/go-study-me/go-remote-debug/main.go"
			],
			"problemMatcher": [
				"$go"
			],
			"group": "build",
			"detail": "cd /Users/jonpan/ownerpro/panlq-github/Go-Project/go-study-me/go-remote-debug; go build uvmt-agent"
		},
		{
			// 2. 将编译好的uvmt-agent以及golang调试工具dlv拷贝到远程服务器
			"type": "shell",
			"label": "scp uvmt-agent and dlv to remoteServer",
			"command": "scp",
			"args": [
				"/tmp/uvmt-agent",
				"ubuntu@${input:remoteServer}:/tmp"
			],
			"dependsOn": [
				"go: build uvmt-agent: disable Inlining and optimizations"
			] // 执行此任务之前,需要执行编译
		},
		{
			// 3. 在远程服务器上运行dlv dap headlease server
			"type": "shell",
			"label": "run remote dlv headless server",
			"command": "ssh",
			"args": [
				"ubuntu@${input:remoteServer}",
				"cd /tmp;dlv dap --listen=:12345"
			],
			"dependsOn": [
				"scp uvmt-agent and dlv to remoteServer"
			], // 同样,需要先执行步骤2
			"isBackground": true, // 因为dlv需要保持在后台运行
			"problemMatcher": [
				{
					"pattern": [
						{
							"regexp": ".",
							"file": 1,
							"location": 2,
							"message": 3
						}
					],
					"background": {
						"activeOnStart": true,
						"beginsPattern": ".",
						"endsPattern": "."
					}
				}
			] // 配置该problemMatcher十分重要,告诉vscode 前置任务已经执行完成,可以执行调试了
		}
	],
	"inputs": [
		{
			// 通过input可以实现remoteServer地址的配置
			"id": "remoteServer",
			"description": "remote server ip address",
			"default": "192.168.65.6",
			// vscode ui会提示输入远程服务地址,并带上默认值
			"type": "promptString"
		}
	]
}